#In this SQL, I'm querying a database with multiple tables in it to quantify statistics about customer and order data.


--1. How many unique orders were placed in January?

SELECT COUNT(DISTINCT orderid) AS unique_orders
FROM BIT_DB.JanSales
WHERE length(orderid)= 6
AND orderid <> 'Order ID';

--2. How many of those orders were for an iPhone?

SELECT COUNT(distinct orderid) AS unique_orders
FROM BIT_DB.JanSales
WHERE product = 'iPhone'
AND length(orderid)= 6
AND orderid <> 'Order ID';

--3. Select the customer account numbers for all the orders that were placed in February.

SELECT distinct cus.acctnum
FROM BIT_DB.customers AS cus
INNER JOIN BIT_DB.FebSales AS feb
ON cus.order_id = feb.orderid
WHERE length(orderid)= 6
AND orderid <> 'Order ID'; 

--4. Which product was the cheapest one sold in January, and what was the price?

SELECT distinct product, price 
FROM BIT_DB.JanSales
WHERE price IN (SELECT MIN(price) FROM BIT_DB.JanSales); 

--5. What is the total revenue for each product sold in January?

SELECT product, SUM(quantity)*price AS revenue
FROM BIT_DB.JanSales
GROUP BY product;

--6. Which products were sold in February at 548 Lincoln St, Seattle, WA 98101, how many of each were sold, and what was the total revenue?

SELECT product, SUM(quantity) AS qty_sold , SUM(quantity)*price AS total_revenue 
FROM BIT_DB.FebSales
WHERE location = '548 Lincoln St, Seattle, WA 98101'
GROUP BY product;

--7. How many customers ordered more than 2 products at a time in February, and what was the average amount spent for those customers?

SELECT COUNT(DISTINCT cus.acctnum) AS no_customers, avg(quantity*price) AS avg_spent
FROM BIT_DB.FebSales AS feb
LEFT JOIN BIT_DB.customers AS cus
ON feb.orderid = cus.order_id
WHERE feb.quantity > 2 
AND length(orderid) = 6
AND orderid <> 'Order ID';

--8. How many of each type of headphone were sold in February?

SELECT Product, SUM(quantity) AS total_headphones
FROM BIT_DB.FebSales 
WHERE Product LIKE '%Headphones%'
AND length(orderid) = 6
AND orderid <> 'Order ID' 
GROUP BY Product;

--9. What was the average amount spent per account in February?

SELECT SUM(quantity*price)/COUNT(cus.acctnum)
FROM BIT_DB.FebSales AS feb
LEFT JOIN BIT_DB.customers AS cus
ON feb.orderID = cus.order_id
WHERE length(orderid) = 6
AND orderid <> 'Order ID'; 

--10. Find order ids from Georgia (GA) where the order has an average price greater than $1,000. Only find orders 
from dates beginning with ‘04/1’. Assume that the dates are stored in the MM/DD/YY HH:MM format.

SELECT orderID
FROM BIT_DB.AprSales 
WHERE location LIKE '%GA%' 
AND orderdate LIKE '04/1%' 
AND length(orderid) = 6 
AND orderid <> 'Order ID'
GROUP BY orderID
HAVING AVG(price) > 1000; 

--11. You’ve been given the following results from the MaySales table. Can you reverse engineer a SQL query that
returns these results? The result set will naturally only return 10 rows.  

              MaySales Results
              
              location	                                                    orderID
              818 Wilson St, Los Angeles, CA 90001	                        194305
              2 Center St, Austin, TX 73301	                                194315
              960 Park St, San Francisco, CA 94016	                        194325
              53 Ridge St, Portland, OR 97035	                              194335
              734 Hickory St, New York City, NY 10001	                      194345
              196 Cherry St, Portland, OR 97035	                            194355
              924 13th St, Los Angeles, CA 90001	                          194365
              602 Washington St, New York City, NY 10001	                  194375
              399 12th St, San Francisco, CA 94016	                        194385
              434 Pine St, Seattle, WA 98101	                              194395


SELECT location, orderID
FROM BIT_DB.MaySales
WHERE orderID LIKE '1943_5%'
AND length(orderid) = 6 
AND orderid <> 'Order ID'
ORDER BY orderID; 

--12. Which product brought in the most revenue in January, and how much revenue did it bring in total?

SELECT product, SUM(quantity* price) AS total_revenue
FROM BIT_DB.JanSales
GROUP BY  product
ORDER BY total_revenue desc
LIMIT 1;




